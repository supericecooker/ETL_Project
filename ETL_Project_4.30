{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import dependencies\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "from datetime import datetime\n",
    "import numpy as np\n",
    "import datetime \n",
    "import psycopg2 as pg\n",
    "import pandas.io.sql as psql\n",
    "import matplotlib as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# *E* extract data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#connect and load csv files\n",
    "amzn_file = \"Asset_Classes/AMZN_Historical.csv\"\n",
    "bitcoin_file = \"Resources/clean_bitcoin.csv\"\n",
    "gld_file = \"Asset_Classes/GLD_Historical.csv\"\n",
    "nflx_file = \"Asset_Classes/NFLX_Historical.csv\"\n",
    "shy_file = \"Asset_Classes/SHY_Historical.csv\"\n",
    "sp_file = \"Asset_Classes/SP_Historical.csv\"\n",
    "uso_file = \"Asset_Classes/USO_Historical.csv\"\n",
    "zm_file = \"Asset_Classes/ZM_Historical.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load files into df\n",
    "amzn_df = pd.read_csv(amzn_file)\n",
    "bitcoin_df  = pd.read_csv(bitcoin_file)\n",
    "gld_df = pd.read_csv(gld_file)\n",
    "nflx_df = pd.read_csv(nflx_file)\n",
    "shy_df = pd.read_csv(shy_file)\n",
    "sp_df = pd.read_csv(sp_file)\n",
    "uso_df = pd.read_csv(uso_file)\n",
    "zm_df= pd.read_csv(zm_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# *T* transform bitcoin_Df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>btc_close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1397</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>7344.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2808</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>7356.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4237</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>7762.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5676</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>8159.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7114</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>8044.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  btc_close\n",
       "1397 2020-01-04    7344.48\n",
       "2808 2020-01-05    7356.70\n",
       "4237 2020-01-06    7762.74\n",
       "5676 2020-01-07    8159.01\n",
       "7114 2020-01-08    8044.44"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transform bitcoin_Df\n",
    "bitcoin_df[[\"date\"]] = bitcoin_df[[\"date\"]].apply(pd.to_datetime)\n",
    "#drop unnamed:0 column\n",
    "new_bitcoin_df = bitcoin_df.drop(columns=['Unnamed: 0'])\n",
    "#rename column to match sql database table\n",
    "new_bitcoin_df.rename(columns={'close': 'btc_close'}, inplace=True)\n",
    "#drop duplicates\n",
    "new_bitcoin_data = new_bitcoin_df.drop_duplicates(subset='date', keep='last', inplace=False)\n",
    "new_bitcoin_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rename close columns\n",
    "amzn_df.rename(columns={'close': 'amzn_close'}, inplace=True)\n",
    "gld_df.rename(columns={'close': 'gld_close'}, inplace=True)\n",
    "nflx_df.rename(columns={'close': 'nflx_close'}, inplace=True)\n",
    "shy_df.rename(columns={'close': 'shy_close'}, inplace=True)\n",
    "sp_df.rename(columns={'close': 'sp_close'}, inplace=True)\n",
    "uso_df.rename(columns={'close': 'uso_close'}, inplace=True)\n",
    "zm_df.rename(columns={'close': 'zm_close'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get only the columns we need from the dfs\n",
    "new_amzn_data = amzn_df[[\"date\",\"amzn_close\"]]\n",
    "new_gld_data = gld_df[[\"date\",\"gld_close\"]]\n",
    "new_nflx_data = nflx_df[[\"date\",\"nflx_close\"]]\n",
    "new_shy_data = shy_df[[\"date\",\"shy_close\"]]\n",
    "new_sp_data = sp_df[[\"date\",\"sp_close\"]]\n",
    "new_uso_data = uso_df[[\"date\",\"uso_close\"]]\n",
    "new_zm_data = zm_df[[\"date\",\"zm_close\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date           object\n",
       "amzn_close    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check column datatypes\n",
    "new_amzn_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\akemem02\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:3494: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[k1] = value[k2]\n"
     ]
    }
   ],
   "source": [
    "#convert \"date\" column from object to datetime type\n",
    "new_amzn_data[[\"date\"]] = new_amzn_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_gld_data[[\"date\"]] = new_gld_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_nflx_data[[\"date\"]] = new_nflx_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_shy_data[[\"date\"]] = new_shy_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_sp_data[[\"date\"]] = new_sp_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_uso_data[[\"date\"]] = new_uso_data[[\"date\"]].apply(pd.to_datetime)\n",
    "new_zm_data[[\"date\"]] = new_zm_data[[\"date\"]].apply(pd.to_datetime)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merge data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "one = pd.merge(new_amzn_data,new_bitcoin_data[['date','btc_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "two = pd.merge(one,new_gld_data [['date','gld_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "three = pd.merge(two,new_nflx_data [['date','nflx_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "four = pd.merge(three,new_shy_data[['date','shy_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "five = pd.merge(four,new_sp_data[['date','sp_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "six = pd.merge(five,new_uso_data [['date','uso_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "seven = pd.merge(six,new_zm_data [['date','zm_close']],\n",
    "                        on = 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>amzn_close</th>\n",
       "      <th>btc_close</th>\n",
       "      <th>gld_close</th>\n",
       "      <th>nflx_close</th>\n",
       "      <th>shy_close</th>\n",
       "      <th>sp_close</th>\n",
       "      <th>uso_close</th>\n",
       "      <th>zm_close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>1902.880005</td>\n",
       "      <td>7762.74</td>\n",
       "      <td>147.389999</td>\n",
       "      <td>335.829987</td>\n",
       "      <td>84.709999</td>\n",
       "      <td>3243.50</td>\n",
       "      <td>13.16</td>\n",
       "      <td>70.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>1906.859985</td>\n",
       "      <td>8159.01</td>\n",
       "      <td>147.970001</td>\n",
       "      <td>330.750000</td>\n",
       "      <td>84.709999</td>\n",
       "      <td>3235.25</td>\n",
       "      <td>13.13</td>\n",
       "      <td>71.900002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>1891.969971</td>\n",
       "      <td>8044.44</td>\n",
       "      <td>146.860001</td>\n",
       "      <td>339.260010</td>\n",
       "      <td>84.669998</td>\n",
       "      <td>3260.25</td>\n",
       "      <td>12.66</td>\n",
       "      <td>72.550003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2020-01-09</td>\n",
       "      <td>1901.050049</td>\n",
       "      <td>7806.78</td>\n",
       "      <td>146.029999</td>\n",
       "      <td>335.660004</td>\n",
       "      <td>84.680000</td>\n",
       "      <td>3276.00</td>\n",
       "      <td>12.49</td>\n",
       "      <td>72.620003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>1883.160034</td>\n",
       "      <td>8200.00</td>\n",
       "      <td>146.910004</td>\n",
       "      <td>329.049988</td>\n",
       "      <td>84.699997</td>\n",
       "      <td>3264.75</td>\n",
       "      <td>12.41</td>\n",
       "      <td>73.089996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date   amzn_close  btc_close   gld_close  nflx_close  shy_close  \\\n",
       "0 2020-01-06  1902.880005    7762.74  147.389999  335.829987  84.709999   \n",
       "1 2020-01-07  1906.859985    8159.01  147.970001  330.750000  84.709999   \n",
       "2 2020-01-08  1891.969971    8044.44  146.860001  339.260010  84.669998   \n",
       "3 2020-01-09  1901.050049    7806.78  146.029999  335.660004  84.680000   \n",
       "4 2020-01-10  1883.160034    8200.00  146.910004  329.049988  84.699997   \n",
       "\n",
       "   sp_close  uso_close   zm_close  \n",
       "0   3243.50      13.16  70.320000  \n",
       "1   3235.25      13.13  71.900002  \n",
       "2   3260.25      12.66  72.550003  \n",
       "3   3276.00      12.49  72.620003  \n",
       "4   3264.75      12.41  73.089996  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seven.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>amzn_close</th>\n",
       "      <th>btc_close</th>\n",
       "      <th>gld_close</th>\n",
       "      <th>nflx_close</th>\n",
       "      <th>shy_close</th>\n",
       "      <th>sp_close</th>\n",
       "      <th>uso_close</th>\n",
       "      <th>zm_close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2020-01-06</td>\n",
       "      <td>1902.880005</td>\n",
       "      <td>7762.74</td>\n",
       "      <td>147.389999</td>\n",
       "      <td>335.829987</td>\n",
       "      <td>84.709999</td>\n",
       "      <td>3243.50</td>\n",
       "      <td>13.16</td>\n",
       "      <td>70.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2020-01-07</td>\n",
       "      <td>1906.859985</td>\n",
       "      <td>8159.01</td>\n",
       "      <td>147.970001</td>\n",
       "      <td>330.750000</td>\n",
       "      <td>84.709999</td>\n",
       "      <td>3235.25</td>\n",
       "      <td>13.13</td>\n",
       "      <td>71.900002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2020-01-08</td>\n",
       "      <td>1891.969971</td>\n",
       "      <td>8044.44</td>\n",
       "      <td>146.860001</td>\n",
       "      <td>339.260010</td>\n",
       "      <td>84.669998</td>\n",
       "      <td>3260.25</td>\n",
       "      <td>12.66</td>\n",
       "      <td>72.550003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2020-01-09</td>\n",
       "      <td>1901.050049</td>\n",
       "      <td>7806.78</td>\n",
       "      <td>146.029999</td>\n",
       "      <td>335.660004</td>\n",
       "      <td>84.680000</td>\n",
       "      <td>3276.00</td>\n",
       "      <td>12.49</td>\n",
       "      <td>72.620003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2020-01-10</td>\n",
       "      <td>1883.160034</td>\n",
       "      <td>8200.00</td>\n",
       "      <td>146.910004</td>\n",
       "      <td>329.049988</td>\n",
       "      <td>84.699997</td>\n",
       "      <td>3264.75</td>\n",
       "      <td>12.41</td>\n",
       "      <td>73.089996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70</td>\n",
       "      <td>2020-04-16</td>\n",
       "      <td>2408.189941</td>\n",
       "      <td>7111.67</td>\n",
       "      <td>161.710007</td>\n",
       "      <td>439.170013</td>\n",
       "      <td>86.680000</td>\n",
       "      <td>2863.25</td>\n",
       "      <td>4.36</td>\n",
       "      <td>150.259995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>71</td>\n",
       "      <td>2020-04-17</td>\n",
       "      <td>2375.000000</td>\n",
       "      <td>7024.19</td>\n",
       "      <td>158.570007</td>\n",
       "      <td>422.959991</td>\n",
       "      <td>86.650002</td>\n",
       "      <td>2869.00</td>\n",
       "      <td>4.21</td>\n",
       "      <td>150.059998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>72</td>\n",
       "      <td>2020-04-20</td>\n",
       "      <td>2393.610107</td>\n",
       "      <td>6841.00</td>\n",
       "      <td>159.699997</td>\n",
       "      <td>437.489990</td>\n",
       "      <td>86.650002</td>\n",
       "      <td>2814.00</td>\n",
       "      <td>3.75</td>\n",
       "      <td>148.990005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>73</td>\n",
       "      <td>2020-04-21</td>\n",
       "      <td>2328.120117</td>\n",
       "      <td>6854.98</td>\n",
       "      <td>158.610001</td>\n",
       "      <td>433.829987</td>\n",
       "      <td>86.669998</td>\n",
       "      <td>2736.50</td>\n",
       "      <td>2.81</td>\n",
       "      <td>143.270004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74</td>\n",
       "      <td>2020-04-22</td>\n",
       "      <td>2363.489990</td>\n",
       "      <td>6850.60</td>\n",
       "      <td>161.729996</td>\n",
       "      <td>421.420013</td>\n",
       "      <td>86.639999</td>\n",
       "      <td>2775.00</td>\n",
       "      <td>2.51</td>\n",
       "      <td>150.250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>75 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date   amzn_close  btc_close   gld_close  nflx_close  shy_close  \\\n",
       "0  2020-01-06  1902.880005    7762.74  147.389999  335.829987  84.709999   \n",
       "1  2020-01-07  1906.859985    8159.01  147.970001  330.750000  84.709999   \n",
       "2  2020-01-08  1891.969971    8044.44  146.860001  339.260010  84.669998   \n",
       "3  2020-01-09  1901.050049    7806.78  146.029999  335.660004  84.680000   \n",
       "4  2020-01-10  1883.160034    8200.00  146.910004  329.049988  84.699997   \n",
       "..        ...          ...        ...         ...         ...        ...   \n",
       "70 2020-04-16  2408.189941    7111.67  161.710007  439.170013  86.680000   \n",
       "71 2020-04-17  2375.000000    7024.19  158.570007  422.959991  86.650002   \n",
       "72 2020-04-20  2393.610107    6841.00  159.699997  437.489990  86.650002   \n",
       "73 2020-04-21  2328.120117    6854.98  158.610001  433.829987  86.669998   \n",
       "74 2020-04-22  2363.489990    6850.60  161.729996  421.420013  86.639999   \n",
       "\n",
       "    sp_close  uso_close    zm_close  \n",
       "0    3243.50      13.16   70.320000  \n",
       "1    3235.25      13.13   71.900002  \n",
       "2    3260.25      12.66   72.550003  \n",
       "3    3276.00      12.49   72.620003  \n",
       "4    3264.75      12.41   73.089996  \n",
       "..       ...        ...         ...  \n",
       "70   2863.25       4.36  150.259995  \n",
       "71   2869.00       4.21  150.059998  \n",
       "72   2814.00       3.75  148.990005  \n",
       "73   2736.50       2.81  143.270004  \n",
       "74   2775.00       2.51  150.250000  \n",
       "\n",
       "[75 rows x 9 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop nan rows\n",
    "seven.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Connect to Postgres database\n",
    "connection_string = \"postgres:postgres@localhost:5432/assets\"\n",
    "engine = create_engine(f'postgresql://{connection_string}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['stocks']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make sure connecting the the database worked by getting the table names\n",
    "engine.table_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Put our organized Pandas table into the SQL table\n",
    "seven.to_sql(name='stocks', con=engine, if_exists='append', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(datetime.date(2020, 1, 6), 1902.880005, 7762.74, 147.389999, 335.829987, 84.709999, 3243.5, 13.16, 70.32),\n",
       " (datetime.date(2020, 1, 7), 1906.859985, 8159.01, 147.970001, 330.75, 84.709999, 3235.25, 13.13, 71.900002),\n",
       " (datetime.date(2020, 1, 8), 1891.969971, 8044.44, 146.860001, 339.26001, 84.66999799999999, 3260.25, 12.66, 72.550003),\n",
       " (datetime.date(2020, 1, 9), 1901.050049, 7806.78, 146.029999, 335.660004, 84.68, 3276.0, 12.49, 72.620003),\n",
       " (datetime.date(2020, 1, 10), 1883.160034, 8200.0, 146.91000400000001, 329.049988, 84.699997, 3264.75, 12.41, 73.089996),\n",
       " (datetime.date(2020, 1, 13), 1891.300049, 8105.01, 145.820007, 338.920013, 84.690002, 3289.75, 12.2, 74.029999),\n",
       " (datetime.date(2020, 1, 14), 1869.439941, 8813.04, 145.690002, 338.690002, 84.699997, 3288.0, 12.28, 73.160004),\n",
       " (datetime.date(2020, 1, 15), 1862.02002, 8809.17, 146.53999299999998, 339.070007, 84.739998, 3293.75, 12.18, 76.940002),\n",
       " (datetime.date(2020, 1, 16), 1877.939941, 8710.15, 146.309998, 338.619995, 84.739998, 3316.5, 12.29, 76.110001),\n",
       " (datetime.date(2020, 1, 17), 1864.719971, 8892.63, 146.580002, 339.670013, 84.769997, 3325.0, 12.33, 75.559998),\n",
       " (datetime.date(2020, 1, 21), 1892.0, 8717.89, 146.740005, 338.109985, 84.790001, 3319.5, 12.24, 76.730003),\n",
       " (datetime.date(2020, 1, 22), 1887.459961, 8655.93, 146.78999299999998, 326.0, 84.809998, 3319.75, 11.9, 75.540001),\n",
       " (datetime.date(2020, 1, 23), 1884.5799559999998, 8378.44, 147.119995, 349.600006, 84.839996, 3326.0, 11.66, 74.470001),\n",
       " (datetime.date(2020, 1, 24), 1861.640015, 8422.13, 147.979996, 353.160004, 84.870003, 3293.5, 11.43, 73.0),\n",
       " (datetime.date(2020, 1, 27), 1828.339966, 8894.54, 148.990005, 342.880005, 84.959999, 3239.5, 11.1, 70.440002),\n",
       " (datetime.date(2020, 1, 28), 1853.25, 9400.0, 147.66000400000001, 348.519989, 84.91999799999999, 3278.25, 11.25, 71.510002),\n",
       " (datetime.date(2020, 1, 29), 1858.0, 9289.18, 148.46000700000002, 343.160004, 85.0, 3272.5, 11.16, 73.58000200000001),\n",
       " (datetime.date(2020, 1, 30), 1870.680054, 9500.0, 148.470001, 347.73999, 85.010002, 3289.75, 11.08, 74.540001),\n",
       " (datetime.date(2020, 1, 31), 2008.719971, 9327.85, 149.330002, 345.089996, 85.120003, 3224.0, 10.84, 76.300003),\n",
       " (datetime.date(2020, 2, 3), 2004.199951, 9288.09, 148.360001, 358.0, 84.959999, 3245.5, 10.49, 87.660004),\n",
       " (datetime.date(2020, 2, 4), 2049.669922, 9159.37, 146.429993, 369.01001, 84.870003, 3299.5, 10.44, 85.790001),\n",
       " (datetime.date(2020, 2, 5), 2039.869995, 9618.42, 146.610001, 369.670013, 84.809998, 3335.0, 10.7, 86.989998),\n",
       " (datetime.date(2020, 2, 6), 2050.22998, 9754.63, 147.399994, 366.950012, 84.83000200000001, 3345.25, 10.74, 87.260002),\n",
       " (datetime.date(2020, 2, 7), 2079.280029, 9803.42, 147.78999299999998, 366.769989, 84.879997, 3325.5, 10.58, 88.639999),\n",
       " (datetime.date(2020, 2, 10), 2133.909912, 9850.01, 148.169998, 371.070007, 84.91999799999999, 3353.0, 10.42, 89.66999799999999),\n",
       " (datetime.date(2020, 2, 11), 2150.800049, 10268.98, 147.66000400000001, 373.690002, 84.879997, 3357.5, 10.5, 88.68),\n",
       " (datetime.date(2020, 2, 12), 2160.0, 10348.78, 147.53999299999998, 380.01001, 84.839996, 3380.5, 10.81, 88.279999),\n",
       " (datetime.date(2020, 2, 13), 2149.8701170000004, 10228.67, 148.380005, 381.399994, 84.860001, 3377.5, 10.84, 89.860001),\n",
       " (datetime.date(2020, 2, 14), 2134.8701170000004, 10364.04, 149.0, 380.399994, 84.900002, 3381.0, 10.95, 90.949997),\n",
       " (datetime.date(2020, 2, 18), 2155.669922, 10185.17, 150.91000400000001, 387.77999900000003, 84.93, 3369.25, 10.95, 96.389999),\n",
       " (datetime.date(2020, 2, 19), 2170.219971, 9595.72, 151.78999299999998, 386.190002, 84.940002, 3387.25, 11.18, 103.93),\n",
       " (datetime.date(2020, 2, 20), 2153.100098, 9612.76, 152.41000400000001, 386.0, 84.959999, 3369.25, 11.28, 105.290001),\n",
       " (datetime.date(2020, 2, 21), 2095.969971, 9696.13, 154.699997, 380.070007, 85.029999, 3339.25, 11.16, 101.760002),\n",
       " (datetime.date(2020, 2, 24), 2009.290039, 9652.58, 156.08999599999999, 368.700012, 85.16999799999999, 3226.25, 10.74, 105.010002),\n",
       " (datetime.date(2020, 2, 25), 1972.7399899999998, 9305.4, 153.300003, 360.089996, 85.260002, 3132.5, 10.4, 107.08000200000001),\n",
       " (datetime.date(2020, 2, 26), 1979.589966, 8779.36, 153.970001, 379.23999, 85.32, 3110.25, 10.19, 106.879997),\n",
       " (datetime.date(2020, 2, 27), 1884.300049, 8816.5, 154.0, 371.709991, 85.41999799999999, 3110.25, 9.78, 113.550003),\n",
       " (datetime.date(2020, 2, 28), 1883.75, 8703.84, 148.380005, 369.02999900000003, 85.730003, 2956.899902, 9.45, 105.0),\n",
       " (datetime.date(2020, 3, 2), 1953.949951, 8917.34, 149.199997, 381.049988, 85.57, 2951.100098, 9.92, 113.110001),\n",
       " (datetime.date(2020, 3, 3), 1908.9899899999998, 8755.45, 153.889999, 368.769989, 85.910004, 3065.100098, 9.89, 117.470001),\n",
       " (datetime.date(2020, 3, 4), 1975.8299559999998, 8753.28, 154.16000400000001, 383.790009, 85.91999799999999, 2997.100098, 9.86, 116.800003),\n",
       " (datetime.date(2020, 3, 5), 1924.030029, 9066.65, 157.490005, 372.77999900000003, 86.099998, 3114.699951, 9.61, 125.0),\n",
       " (datetime.date(2020, 3, 6), 1901.089966, 9153.79, 157.550003, 368.97000099999997, 86.199997, 3015.5, 8.73, 114.32),\n",
       " (datetime.date(2020, 3, 9), 1800.609985, 7936.25, 157.809998, 346.48999, 86.66999799999999, 2964.100098, 6.52, 113.75),\n",
       " (datetime.date(2020, 3, 10), 1891.819946, 7885.92, 154.479996, 364.130005, 86.290001, 2747.699951, 7.24, 108.489998),\n",
       " (datetime.date(2020, 3, 11), 1820.859985, 7934.57, 153.929993, 349.920013, 86.190002, 2865.75, 6.94, 110.300003),\n",
       " (datetime.date(2020, 3, 12), 1676.609985, 4841.67, 147.78999299999998, 315.25, 86.16999799999999, 2740.300049, 6.54, 109.470001),\n",
       " (datetime.date(2020, 3, 13), 1785.0, 5622.74, 143.279999, 336.299988, 86.279999, 2468.899902, 6.96, 107.470001),\n",
       " (datetime.date(2020, 3, 16), 1689.1500239999998, 5033.42, 141.639999, 298.839996, 86.41999799999999, 2683.899902, 6.05, 107.860001),\n",
       " (datetime.date(2020, 3, 17), 1807.839966, 5324.99, 143.559998, 319.75, 86.220001, 2406.25, 5.71, 111.099998),\n",
       " (datetime.date(2020, 3, 18), 1830.0, 5406.92, 140.699997, 315.47000099999997, 86.110001, 2485.5, 4.71, 118.709999),\n",
       " (datetime.date(2020, 3, 19), 1880.930054, 6181.18, 138.03999299999998, 332.02999900000003, 86.260002, 2401.399902, 5.37, 123.769997),\n",
       " (datetime.date(2020, 3, 20), 1846.089966, 6210.14, 140.110001, 332.829987, 86.489998, 2389.0, 4.94, 130.550003),\n",
       " (datetime.date(2020, 3, 23), 1902.8299559999998, 6493.51, 146.300003, 360.269989, 86.589996, 2257.0, 4.88, 159.559998),\n",
       " (datetime.date(2020, 3, 24), 1940.0999760000002, 6768.64, 153.399994, 357.320007, 86.470001, 2432.75, 4.98, 135.179993),\n",
       " (datetime.date(2020, 3, 25), 1885.839966, 6692.22, 151.300003, 342.390015, 86.57, 2464.25, 5.08, 138.110001),\n",
       " (datetime.date(2020, 3, 26), 1955.4899899999998, 6760.72, 153.240005, 362.98999, 86.66999799999999, 2618.25, 4.83, 141.149994),\n",
       " (datetime.date(2020, 3, 27), 1900.0999760000002, 6376.03, 152.25, 357.119995, 86.650002, 2520.0, 4.47, 151.699997),\n",
       " (datetime.date(2020, 3, 30), 1963.949951, 6407.77, 152.919998, 370.959991, 86.690002, 2615.0, 4.23, 150.880005),\n",
       " (datetime.date(2020, 3, 31), 1949.719971, 6421.14, 148.050003, 375.5, 86.66999799999999, 2542.0, 4.21, 146.119995),\n",
       " (datetime.date(2020, 4, 1), 1907.699951, 6652.07, 149.449997, 364.079987, 86.620003, 2469.0, 4.38, 137.0),\n",
       " (datetime.date(2020, 4, 2), 1918.8299559999998, 6801.99, 151.899994, 370.079987, 86.639999, 2504.25, 5.11, 121.93),\n",
       " (datetime.date(2020, 4, 3), 1906.589966, 6742.57, 152.649994, 361.76001, 86.620003, 2480.25, 5.9, 128.199997),\n",
       " (datetime.date(2020, 4, 6), 1997.589966, 7352.43, 156.880005, 379.959991, 86.559998, 2656.25, 5.48, 122.940002),\n",
       " (datetime.date(2020, 4, 7), 2011.5999760000002, 7202.73, 156.03999299999998, 372.27999900000003, 86.540001, 2644.5, 5.09, 113.75),\n",
       " (datetime.date(2020, 4, 8), 2043.0, 7367.36, 154.649994, 371.119995, 86.589996, 2746.5, 5.37, 117.809998),\n",
       " (datetime.date(2020, 4, 9), 2042.7600100000002, 7293.93, 158.690002, 370.72000099999997, 86.620003, 2787.0, 4.98, 124.510002),\n",
       " (datetime.date(2020, 4, 13), 2168.8701170000004, 6864.22, 161.41000400000001, 396.72000099999997, 86.629997, 2765.5, 4.93, 135.919998),\n",
       " (datetime.date(2020, 4, 14), 2283.320068, 6879.75, 162.679993, 413.549988, 86.629997, 2835.0, 4.66, 141.889999),\n",
       " (datetime.date(2020, 4, 15), 2307.679932, 6619.0, 161.850006, 426.75, 86.660004, 2754.25, 4.43, 151.559998),\n",
       " (datetime.date(2020, 4, 16), 2408.189941, 7111.67, 161.71000700000002, 439.170013, 86.68, 2863.25, 4.36, 150.259995),\n",
       " (datetime.date(2020, 4, 17), 2375.0, 7024.19, 158.570007, 422.959991, 86.650002, 2869.0, 4.21, 150.059998),\n",
       " (datetime.date(2020, 4, 20), 2393.610107, 6841.0, 159.699997, 437.48999000000003, 86.650002, 2814.0, 3.75, 148.990005),\n",
       " (datetime.date(2020, 4, 21), 2328.1201170000004, 6854.98, 158.610001, 433.829987, 86.66999799999999, 2736.5, 2.81, 143.270004),\n",
       " (datetime.date(2020, 4, 22), 2363.48999, 6850.6, 161.729996, 421.420013, 86.639999, 2775.0, 2.51, 150.25),\n",
       " (datetime.date(2020, 1, 6), 1902.880005, 7762.74, 147.389999, 335.829987, 84.709999, 3243.5, 13.16, 70.32),\n",
       " (datetime.date(2020, 1, 7), 1906.859985, 8159.01, 147.970001, 330.75, 84.709999, 3235.25, 13.13, 71.900002),\n",
       " (datetime.date(2020, 1, 8), 1891.969971, 8044.44, 146.860001, 339.26001, 84.66999799999999, 3260.25, 12.66, 72.550003),\n",
       " (datetime.date(2020, 1, 9), 1901.050049, 7806.78, 146.029999, 335.660004, 84.68, 3276.0, 12.49, 72.620003),\n",
       " (datetime.date(2020, 1, 10), 1883.160034, 8200.0, 146.91000400000001, 329.049988, 84.699997, 3264.75, 12.41, 73.089996),\n",
       " (datetime.date(2020, 1, 13), 1891.300049, 8105.01, 145.820007, 338.920013, 84.690002, 3289.75, 12.2, 74.029999),\n",
       " (datetime.date(2020, 1, 14), 1869.439941, 8813.04, 145.690002, 338.690002, 84.699997, 3288.0, 12.28, 73.160004),\n",
       " (datetime.date(2020, 1, 15), 1862.02002, 8809.17, 146.53999299999998, 339.070007, 84.739998, 3293.75, 12.18, 76.940002),\n",
       " (datetime.date(2020, 1, 16), 1877.939941, 8710.15, 146.309998, 338.619995, 84.739998, 3316.5, 12.29, 76.110001),\n",
       " (datetime.date(2020, 1, 17), 1864.719971, 8892.63, 146.580002, 339.670013, 84.769997, 3325.0, 12.33, 75.559998),\n",
       " (datetime.date(2020, 1, 21), 1892.0, 8717.89, 146.740005, 338.109985, 84.790001, 3319.5, 12.24, 76.730003),\n",
       " (datetime.date(2020, 1, 22), 1887.459961, 8655.93, 146.78999299999998, 326.0, 84.809998, 3319.75, 11.9, 75.540001),\n",
       " (datetime.date(2020, 1, 23), 1884.5799559999998, 8378.44, 147.119995, 349.600006, 84.839996, 3326.0, 11.66, 74.470001),\n",
       " (datetime.date(2020, 1, 24), 1861.640015, 8422.13, 147.979996, 353.160004, 84.870003, 3293.5, 11.43, 73.0),\n",
       " (datetime.date(2020, 1, 27), 1828.339966, 8894.54, 148.990005, 342.880005, 84.959999, 3239.5, 11.1, 70.440002),\n",
       " (datetime.date(2020, 1, 28), 1853.25, 9400.0, 147.66000400000001, 348.519989, 84.91999799999999, 3278.25, 11.25, 71.510002),\n",
       " (datetime.date(2020, 1, 29), 1858.0, 9289.18, 148.46000700000002, 343.160004, 85.0, 3272.5, 11.16, 73.58000200000001),\n",
       " (datetime.date(2020, 1, 30), 1870.680054, 9500.0, 148.470001, 347.73999, 85.010002, 3289.75, 11.08, 74.540001),\n",
       " (datetime.date(2020, 1, 31), 2008.719971, 9327.85, 149.330002, 345.089996, 85.120003, 3224.0, 10.84, 76.300003),\n",
       " (datetime.date(2020, 2, 3), 2004.199951, 9288.09, 148.360001, 358.0, 84.959999, 3245.5, 10.49, 87.660004),\n",
       " (datetime.date(2020, 2, 4), 2049.669922, 9159.37, 146.429993, 369.01001, 84.870003, 3299.5, 10.44, 85.790001),\n",
       " (datetime.date(2020, 2, 5), 2039.869995, 9618.42, 146.610001, 369.670013, 84.809998, 3335.0, 10.7, 86.989998),\n",
       " (datetime.date(2020, 2, 6), 2050.22998, 9754.63, 147.399994, 366.950012, 84.83000200000001, 3345.25, 10.74, 87.260002),\n",
       " (datetime.date(2020, 2, 7), 2079.280029, 9803.42, 147.78999299999998, 366.769989, 84.879997, 3325.5, 10.58, 88.639999),\n",
       " (datetime.date(2020, 2, 10), 2133.909912, 9850.01, 148.169998, 371.070007, 84.91999799999999, 3353.0, 10.42, 89.66999799999999),\n",
       " (datetime.date(2020, 2, 11), 2150.800049, 10268.98, 147.66000400000001, 373.690002, 84.879997, 3357.5, 10.5, 88.68),\n",
       " (datetime.date(2020, 2, 12), 2160.0, 10348.78, 147.53999299999998, 380.01001, 84.839996, 3380.5, 10.81, 88.279999),\n",
       " (datetime.date(2020, 2, 13), 2149.8701170000004, 10228.67, 148.380005, 381.399994, 84.860001, 3377.5, 10.84, 89.860001),\n",
       " (datetime.date(2020, 2, 14), 2134.8701170000004, 10364.04, 149.0, 380.399994, 84.900002, 3381.0, 10.95, 90.949997),\n",
       " (datetime.date(2020, 2, 18), 2155.669922, 10185.17, 150.91000400000001, 387.77999900000003, 84.93, 3369.25, 10.95, 96.389999),\n",
       " (datetime.date(2020, 2, 19), 2170.219971, 9595.72, 151.78999299999998, 386.190002, 84.940002, 3387.25, 11.18, 103.93),\n",
       " (datetime.date(2020, 2, 20), 2153.100098, 9612.76, 152.41000400000001, 386.0, 84.959999, 3369.25, 11.28, 105.290001),\n",
       " (datetime.date(2020, 2, 21), 2095.969971, 9696.13, 154.699997, 380.070007, 85.029999, 3339.25, 11.16, 101.760002),\n",
       " (datetime.date(2020, 2, 24), 2009.290039, 9652.58, 156.08999599999999, 368.700012, 85.16999799999999, 3226.25, 10.74, 105.010002),\n",
       " (datetime.date(2020, 2, 25), 1972.7399899999998, 9305.4, 153.300003, 360.089996, 85.260002, 3132.5, 10.4, 107.08000200000001),\n",
       " (datetime.date(2020, 2, 26), 1979.589966, 8779.36, 153.970001, 379.23999, 85.32, 3110.25, 10.19, 106.879997),\n",
       " (datetime.date(2020, 2, 27), 1884.300049, 8816.5, 154.0, 371.709991, 85.41999799999999, 3110.25, 9.78, 113.550003),\n",
       " (datetime.date(2020, 2, 28), 1883.75, 8703.84, 148.380005, 369.02999900000003, 85.730003, 2956.899902, 9.45, 105.0),\n",
       " (datetime.date(2020, 3, 2), 1953.949951, 8917.34, 149.199997, 381.049988, 85.57, 2951.100098, 9.92, 113.110001),\n",
       " (datetime.date(2020, 3, 3), 1908.9899899999998, 8755.45, 153.889999, 368.769989, 85.910004, 3065.100098, 9.89, 117.470001),\n",
       " (datetime.date(2020, 3, 4), 1975.8299559999998, 8753.28, 154.16000400000001, 383.790009, 85.91999799999999, 2997.100098, 9.86, 116.800003),\n",
       " (datetime.date(2020, 3, 5), 1924.030029, 9066.65, 157.490005, 372.77999900000003, 86.099998, 3114.699951, 9.61, 125.0),\n",
       " (datetime.date(2020, 3, 6), 1901.089966, 9153.79, 157.550003, 368.97000099999997, 86.199997, 3015.5, 8.73, 114.32),\n",
       " (datetime.date(2020, 3, 9), 1800.609985, 7936.25, 157.809998, 346.48999, 86.66999799999999, 2964.100098, 6.52, 113.75),\n",
       " (datetime.date(2020, 3, 10), 1891.819946, 7885.92, 154.479996, 364.130005, 86.290001, 2747.699951, 7.24, 108.489998),\n",
       " (datetime.date(2020, 3, 11), 1820.859985, 7934.57, 153.929993, 349.920013, 86.190002, 2865.75, 6.94, 110.300003),\n",
       " (datetime.date(2020, 3, 12), 1676.609985, 4841.67, 147.78999299999998, 315.25, 86.16999799999999, 2740.300049, 6.54, 109.470001),\n",
       " (datetime.date(2020, 3, 13), 1785.0, 5622.74, 143.279999, 336.299988, 86.279999, 2468.899902, 6.96, 107.470001),\n",
       " (datetime.date(2020, 3, 16), 1689.1500239999998, 5033.42, 141.639999, 298.839996, 86.41999799999999, 2683.899902, 6.05, 107.860001),\n",
       " (datetime.date(2020, 3, 17), 1807.839966, 5324.99, 143.559998, 319.75, 86.220001, 2406.25, 5.71, 111.099998),\n",
       " (datetime.date(2020, 3, 18), 1830.0, 5406.92, 140.699997, 315.47000099999997, 86.110001, 2485.5, 4.71, 118.709999),\n",
       " (datetime.date(2020, 3, 19), 1880.930054, 6181.18, 138.03999299999998, 332.02999900000003, 86.260002, 2401.399902, 5.37, 123.769997),\n",
       " (datetime.date(2020, 3, 20), 1846.089966, 6210.14, 140.110001, 332.829987, 86.489998, 2389.0, 4.94, 130.550003),\n",
       " (datetime.date(2020, 3, 23), 1902.8299559999998, 6493.51, 146.300003, 360.269989, 86.589996, 2257.0, 4.88, 159.559998),\n",
       " (datetime.date(2020, 3, 24), 1940.0999760000002, 6768.64, 153.399994, 357.320007, 86.470001, 2432.75, 4.98, 135.179993),\n",
       " (datetime.date(2020, 3, 25), 1885.839966, 6692.22, 151.300003, 342.390015, 86.57, 2464.25, 5.08, 138.110001),\n",
       " (datetime.date(2020, 3, 26), 1955.4899899999998, 6760.72, 153.240005, 362.98999, 86.66999799999999, 2618.25, 4.83, 141.149994),\n",
       " (datetime.date(2020, 3, 27), 1900.0999760000002, 6376.03, 152.25, 357.119995, 86.650002, 2520.0, 4.47, 151.699997),\n",
       " (datetime.date(2020, 3, 30), 1963.949951, 6407.77, 152.919998, 370.959991, 86.690002, 2615.0, 4.23, 150.880005),\n",
       " (datetime.date(2020, 3, 31), 1949.719971, 6421.14, 148.050003, 375.5, 86.66999799999999, 2542.0, 4.21, 146.119995),\n",
       " (datetime.date(2020, 4, 1), 1907.699951, 6652.07, 149.449997, 364.079987, 86.620003, 2469.0, 4.38, 137.0),\n",
       " (datetime.date(2020, 4, 2), 1918.8299559999998, 6801.99, 151.899994, 370.079987, 86.639999, 2504.25, 5.11, 121.93),\n",
       " (datetime.date(2020, 4, 3), 1906.589966, 6742.57, 152.649994, 361.76001, 86.620003, 2480.25, 5.9, 128.199997),\n",
       " (datetime.date(2020, 4, 6), 1997.589966, 7352.43, 156.880005, 379.959991, 86.559998, 2656.25, 5.48, 122.940002),\n",
       " (datetime.date(2020, 4, 7), 2011.5999760000002, 7202.73, 156.03999299999998, 372.27999900000003, 86.540001, 2644.5, 5.09, 113.75),\n",
       " (datetime.date(2020, 4, 8), 2043.0, 7367.36, 154.649994, 371.119995, 86.589996, 2746.5, 5.37, 117.809998),\n",
       " (datetime.date(2020, 4, 9), 2042.7600100000002, 7293.93, 158.690002, 370.72000099999997, 86.620003, 2787.0, 4.98, 124.510002),\n",
       " (datetime.date(2020, 4, 13), 2168.8701170000004, 6864.22, 161.41000400000001, 396.72000099999997, 86.629997, 2765.5, 4.93, 135.919998),\n",
       " (datetime.date(2020, 4, 14), 2283.320068, 6879.75, 162.679993, 413.549988, 86.629997, 2835.0, 4.66, 141.889999),\n",
       " (datetime.date(2020, 4, 15), 2307.679932, 6619.0, 161.850006, 426.75, 86.660004, 2754.25, 4.43, 151.559998),\n",
       " (datetime.date(2020, 4, 16), 2408.189941, 7111.67, 161.71000700000002, 439.170013, 86.68, 2863.25, 4.36, 150.259995),\n",
       " (datetime.date(2020, 4, 17), 2375.0, 7024.19, 158.570007, 422.959991, 86.650002, 2869.0, 4.21, 150.059998),\n",
       " (datetime.date(2020, 4, 20), 2393.610107, 6841.0, 159.699997, 437.48999000000003, 86.650002, 2814.0, 3.75, 148.990005),\n",
       " (datetime.date(2020, 4, 21), 2328.1201170000004, 6854.98, 158.610001, 433.829987, 86.66999799999999, 2736.5, 2.81, 143.270004),\n",
       " (datetime.date(2020, 4, 22), 2363.48999, 6850.6, 161.729996, 421.420013, 86.639999, 2775.0, 2.51, 150.25),\n",
       " (datetime.date(2020, 1, 6), 1902.880005, 7762.74, 147.389999, 335.829987, 84.709999, 3243.5, 13.16, 70.32),\n",
       " (datetime.date(2020, 1, 7), 1906.859985, 8159.01, 147.970001, 330.75, 84.709999, 3235.25, 13.13, 71.900002),\n",
       " (datetime.date(2020, 1, 8), 1891.969971, 8044.44, 146.860001, 339.26001, 84.66999799999999, 3260.25, 12.66, 72.550003),\n",
       " (datetime.date(2020, 1, 9), 1901.050049, 7806.78, 146.029999, 335.660004, 84.68, 3276.0, 12.49, 72.620003),\n",
       " (datetime.date(2020, 1, 10), 1883.160034, 8200.0, 146.91000400000001, 329.049988, 84.699997, 3264.75, 12.41, 73.089996),\n",
       " (datetime.date(2020, 1, 13), 1891.300049, 8105.01, 145.820007, 338.920013, 84.690002, 3289.75, 12.2, 74.029999),\n",
       " (datetime.date(2020, 1, 14), 1869.439941, 8813.04, 145.690002, 338.690002, 84.699997, 3288.0, 12.28, 73.160004),\n",
       " (datetime.date(2020, 1, 15), 1862.02002, 8809.17, 146.53999299999998, 339.070007, 84.739998, 3293.75, 12.18, 76.940002),\n",
       " (datetime.date(2020, 1, 16), 1877.939941, 8710.15, 146.309998, 338.619995, 84.739998, 3316.5, 12.29, 76.110001),\n",
       " (datetime.date(2020, 1, 17), 1864.719971, 8892.63, 146.580002, 339.670013, 84.769997, 3325.0, 12.33, 75.559998),\n",
       " (datetime.date(2020, 1, 21), 1892.0, 8717.89, 146.740005, 338.109985, 84.790001, 3319.5, 12.24, 76.730003),\n",
       " (datetime.date(2020, 1, 22), 1887.459961, 8655.93, 146.78999299999998, 326.0, 84.809998, 3319.75, 11.9, 75.540001),\n",
       " (datetime.date(2020, 1, 23), 1884.5799559999998, 8378.44, 147.119995, 349.600006, 84.839996, 3326.0, 11.66, 74.470001),\n",
       " (datetime.date(2020, 1, 24), 1861.640015, 8422.13, 147.979996, 353.160004, 84.870003, 3293.5, 11.43, 73.0),\n",
       " (datetime.date(2020, 1, 27), 1828.339966, 8894.54, 148.990005, 342.880005, 84.959999, 3239.5, 11.1, 70.440002),\n",
       " (datetime.date(2020, 1, 28), 1853.25, 9400.0, 147.66000400000001, 348.519989, 84.91999799999999, 3278.25, 11.25, 71.510002),\n",
       " (datetime.date(2020, 1, 29), 1858.0, 9289.18, 148.46000700000002, 343.160004, 85.0, 3272.5, 11.16, 73.58000200000001),\n",
       " (datetime.date(2020, 1, 30), 1870.680054, 9500.0, 148.470001, 347.73999, 85.010002, 3289.75, 11.08, 74.540001),\n",
       " (datetime.date(2020, 1, 31), 2008.719971, 9327.85, 149.330002, 345.089996, 85.120003, 3224.0, 10.84, 76.300003),\n",
       " (datetime.date(2020, 2, 3), 2004.199951, 9288.09, 148.360001, 358.0, 84.959999, 3245.5, 10.49, 87.660004),\n",
       " (datetime.date(2020, 2, 4), 2049.669922, 9159.37, 146.429993, 369.01001, 84.870003, 3299.5, 10.44, 85.790001),\n",
       " (datetime.date(2020, 2, 5), 2039.869995, 9618.42, 146.610001, 369.670013, 84.809998, 3335.0, 10.7, 86.989998),\n",
       " (datetime.date(2020, 2, 6), 2050.22998, 9754.63, 147.399994, 366.950012, 84.83000200000001, 3345.25, 10.74, 87.260002),\n",
       " (datetime.date(2020, 2, 7), 2079.280029, 9803.42, 147.78999299999998, 366.769989, 84.879997, 3325.5, 10.58, 88.639999),\n",
       " (datetime.date(2020, 2, 10), 2133.909912, 9850.01, 148.169998, 371.070007, 84.91999799999999, 3353.0, 10.42, 89.66999799999999),\n",
       " (datetime.date(2020, 2, 11), 2150.800049, 10268.98, 147.66000400000001, 373.690002, 84.879997, 3357.5, 10.5, 88.68),\n",
       " (datetime.date(2020, 2, 12), 2160.0, 10348.78, 147.53999299999998, 380.01001, 84.839996, 3380.5, 10.81, 88.279999),\n",
       " (datetime.date(2020, 2, 13), 2149.8701170000004, 10228.67, 148.380005, 381.399994, 84.860001, 3377.5, 10.84, 89.860001),\n",
       " (datetime.date(2020, 2, 14), 2134.8701170000004, 10364.04, 149.0, 380.399994, 84.900002, 3381.0, 10.95, 90.949997),\n",
       " (datetime.date(2020, 2, 18), 2155.669922, 10185.17, 150.91000400000001, 387.77999900000003, 84.93, 3369.25, 10.95, 96.389999),\n",
       " (datetime.date(2020, 2, 19), 2170.219971, 9595.72, 151.78999299999998, 386.190002, 84.940002, 3387.25, 11.18, 103.93),\n",
       " (datetime.date(2020, 2, 20), 2153.100098, 9612.76, 152.41000400000001, 386.0, 84.959999, 3369.25, 11.28, 105.290001),\n",
       " (datetime.date(2020, 2, 21), 2095.969971, 9696.13, 154.699997, 380.070007, 85.029999, 3339.25, 11.16, 101.760002),\n",
       " (datetime.date(2020, 2, 24), 2009.290039, 9652.58, 156.08999599999999, 368.700012, 85.16999799999999, 3226.25, 10.74, 105.010002),\n",
       " (datetime.date(2020, 2, 25), 1972.7399899999998, 9305.4, 153.300003, 360.089996, 85.260002, 3132.5, 10.4, 107.08000200000001),\n",
       " (datetime.date(2020, 2, 26), 1979.589966, 8779.36, 153.970001, 379.23999, 85.32, 3110.25, 10.19, 106.879997),\n",
       " (datetime.date(2020, 2, 27), 1884.300049, 8816.5, 154.0, 371.709991, 85.41999799999999, 3110.25, 9.78, 113.550003),\n",
       " (datetime.date(2020, 2, 28), 1883.75, 8703.84, 148.380005, 369.02999900000003, 85.730003, 2956.899902, 9.45, 105.0),\n",
       " (datetime.date(2020, 3, 2), 1953.949951, 8917.34, 149.199997, 381.049988, 85.57, 2951.100098, 9.92, 113.110001),\n",
       " (datetime.date(2020, 3, 3), 1908.9899899999998, 8755.45, 153.889999, 368.769989, 85.910004, 3065.100098, 9.89, 117.470001),\n",
       " (datetime.date(2020, 3, 4), 1975.8299559999998, 8753.28, 154.16000400000001, 383.790009, 85.91999799999999, 2997.100098, 9.86, 116.800003),\n",
       " (datetime.date(2020, 3, 5), 1924.030029, 9066.65, 157.490005, 372.77999900000003, 86.099998, 3114.699951, 9.61, 125.0),\n",
       " (datetime.date(2020, 3, 6), 1901.089966, 9153.79, 157.550003, 368.97000099999997, 86.199997, 3015.5, 8.73, 114.32),\n",
       " (datetime.date(2020, 3, 9), 1800.609985, 7936.25, 157.809998, 346.48999, 86.66999799999999, 2964.100098, 6.52, 113.75),\n",
       " (datetime.date(2020, 3, 10), 1891.819946, 7885.92, 154.479996, 364.130005, 86.290001, 2747.699951, 7.24, 108.489998),\n",
       " (datetime.date(2020, 3, 11), 1820.859985, 7934.57, 153.929993, 349.920013, 86.190002, 2865.75, 6.94, 110.300003),\n",
       " (datetime.date(2020, 3, 12), 1676.609985, 4841.67, 147.78999299999998, 315.25, 86.16999799999999, 2740.300049, 6.54, 109.470001),\n",
       " (datetime.date(2020, 3, 13), 1785.0, 5622.74, 143.279999, 336.299988, 86.279999, 2468.899902, 6.96, 107.470001),\n",
       " (datetime.date(2020, 3, 16), 1689.1500239999998, 5033.42, 141.639999, 298.839996, 86.41999799999999, 2683.899902, 6.05, 107.860001),\n",
       " (datetime.date(2020, 3, 17), 1807.839966, 5324.99, 143.559998, 319.75, 86.220001, 2406.25, 5.71, 111.099998),\n",
       " (datetime.date(2020, 3, 18), 1830.0, 5406.92, 140.699997, 315.47000099999997, 86.110001, 2485.5, 4.71, 118.709999),\n",
       " (datetime.date(2020, 3, 19), 1880.930054, 6181.18, 138.03999299999998, 332.02999900000003, 86.260002, 2401.399902, 5.37, 123.769997),\n",
       " (datetime.date(2020, 3, 20), 1846.089966, 6210.14, 140.110001, 332.829987, 86.489998, 2389.0, 4.94, 130.550003),\n",
       " (datetime.date(2020, 3, 23), 1902.8299559999998, 6493.51, 146.300003, 360.269989, 86.589996, 2257.0, 4.88, 159.559998),\n",
       " (datetime.date(2020, 3, 24), 1940.0999760000002, 6768.64, 153.399994, 357.320007, 86.470001, 2432.75, 4.98, 135.179993),\n",
       " (datetime.date(2020, 3, 25), 1885.839966, 6692.22, 151.300003, 342.390015, 86.57, 2464.25, 5.08, 138.110001),\n",
       " (datetime.date(2020, 3, 26), 1955.4899899999998, 6760.72, 153.240005, 362.98999, 86.66999799999999, 2618.25, 4.83, 141.149994),\n",
       " (datetime.date(2020, 3, 27), 1900.0999760000002, 6376.03, 152.25, 357.119995, 86.650002, 2520.0, 4.47, 151.699997),\n",
       " (datetime.date(2020, 3, 30), 1963.949951, 6407.77, 152.919998, 370.959991, 86.690002, 2615.0, 4.23, 150.880005),\n",
       " (datetime.date(2020, 3, 31), 1949.719971, 6421.14, 148.050003, 375.5, 86.66999799999999, 2542.0, 4.21, 146.119995),\n",
       " (datetime.date(2020, 4, 1), 1907.699951, 6652.07, 149.449997, 364.079987, 86.620003, 2469.0, 4.38, 137.0),\n",
       " (datetime.date(2020, 4, 2), 1918.8299559999998, 6801.99, 151.899994, 370.079987, 86.639999, 2504.25, 5.11, 121.93),\n",
       " (datetime.date(2020, 4, 3), 1906.589966, 6742.57, 152.649994, 361.76001, 86.620003, 2480.25, 5.9, 128.199997),\n",
       " (datetime.date(2020, 4, 6), 1997.589966, 7352.43, 156.880005, 379.959991, 86.559998, 2656.25, 5.48, 122.940002),\n",
       " (datetime.date(2020, 4, 7), 2011.5999760000002, 7202.73, 156.03999299999998, 372.27999900000003, 86.540001, 2644.5, 5.09, 113.75),\n",
       " (datetime.date(2020, 4, 8), 2043.0, 7367.36, 154.649994, 371.119995, 86.589996, 2746.5, 5.37, 117.809998),\n",
       " (datetime.date(2020, 4, 9), 2042.7600100000002, 7293.93, 158.690002, 370.72000099999997, 86.620003, 2787.0, 4.98, 124.510002),\n",
       " (datetime.date(2020, 4, 13), 2168.8701170000004, 6864.22, 161.41000400000001, 396.72000099999997, 86.629997, 2765.5, 4.93, 135.919998),\n",
       " (datetime.date(2020, 4, 14), 2283.320068, 6879.75, 162.679993, 413.549988, 86.629997, 2835.0, 4.66, 141.889999),\n",
       " (datetime.date(2020, 4, 15), 2307.679932, 6619.0, 161.850006, 426.75, 86.660004, 2754.25, 4.43, 151.559998),\n",
       " (datetime.date(2020, 4, 16), 2408.189941, 7111.67, 161.71000700000002, 439.170013, 86.68, 2863.25, 4.36, 150.259995),\n",
       " (datetime.date(2020, 4, 17), 2375.0, 7024.19, 158.570007, 422.959991, 86.650002, 2869.0, 4.21, 150.059998),\n",
       " (datetime.date(2020, 4, 20), 2393.610107, 6841.0, 159.699997, 437.48999000000003, 86.650002, 2814.0, 3.75, 148.990005),\n",
       " (datetime.date(2020, 4, 21), 2328.1201170000004, 6854.98, 158.610001, 433.829987, 86.66999799999999, 2736.5, 2.81, 143.270004),\n",
       " (datetime.date(2020, 4, 22), 2363.48999, 6850.6, 161.729996, 421.420013, 86.639999, 2775.0, 2.51, 150.25)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#make sure it executed correctly\n",
    "engine.execute(\"SELECT * from stocks;\").fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
